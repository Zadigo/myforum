{
	"info": {
		"_postman_id": "a2f4078b-0d8b-4a43-bcb8-065535ed0b5e",
		"name": "Forum",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8871030"
	},
	"item": [
		{
			"name": "Threads",
			"item": [
				{
					"name": "Create Thread",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"forum_id\": 1,\r\n    \"title\": \"Maria Sharapova cheater - Test 2\",\r\n    \"result_thread_title\": {\r\n        \"tournament\": null,\r\n        \"round\": null,\r\n        \"winner\": null,\r\n        \"looser\": null,\r\n        \"score\": null\r\n    },\r\n    \"content\": {\r\n        \"delta\": {\r\n            \"ops\": [\r\n                {\r\n                    \"insert\": \"why she cheated\\n\"\r\n                }\r\n            ]\r\n        },\r\n        \"html\": \"<p>why she cheated</p>\",\r\n        \"text\": \"why she cheated\\n\"\r\n    },\r\n    \"category\": \"General discussion\",\r\n    \"watch\": true,\r\n    \"tags\": [],\r\n    \"schedule_date\": null,\r\n    \"is_draft\": false,\r\n    \"add_poll\": false,\r\n    \"poll\": {\r\n        \"question\": \"What is the best option for you ?\",\r\n        \"possibilities\": [\r\n            {\r\n                \"text\": \"That she goes to France\"\r\n            }\r\n        ],\r\n        \"choice_selection\": \"Single\",\r\n        \"choices_limit\": 1,\r\n        \"allow_vote_change\": true,\r\n        \"display\": {\r\n            \"votes_publicly\": false,\r\n            \"results_without_voting\": true\r\n        },\r\n        \"closing\": {\r\n            \"poll_closes\": false,\r\n            \"days\": 7\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}threads/create",
							"host": [
								"{{api_url}}threads"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thread",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}threads/{{thread_id}}/comments?page=1",
							"host": [
								"{{api_url}}threads"
							],
							"path": [
								"{{thread_id}}",
								"comments"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Threads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"list all threads\", () => {\r",
									"    const data = pm.response.json()\r",
									"    const firstThread = data[0]\r",
									"    pm.environment.set('thread_id', firstThread['id'])\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}forums/{{forum_id}}?sort=0",
							"host": [
								"{{api_url}}forums"
							],
							"path": [
								"{{forum_id}}"
							],
							"query": [
								{
									"key": "sort",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('create new comment', () => {\r",
									"    const data = pm.response.json()\r",
									"    pm.environment.set('comment_id', data['id'])\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "why she cheated\\n",
									"type": "text"
								},
								{
									"key": "content_delta",
									"value": "{\"delta\": {\"ops\": [{\"insert\": \"why she cheated\\n\"}]}}",
									"type": "text"
								},
								{
									"key": "content_html",
									"value": "<p>why she cheated</p>",
									"type": "text"
								},
								{
									"key": "thread",
									"value": "{{thread_id}}",
									"type": "text"
								},
								{
									"key": "quotes",
									"value": "[]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}comments/create",
							"host": [
								"{{api_url}}comments"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('create new comment', () => {\r",
									"    const data = pm.response.json()\r",
									"    pm.environment.set('comment_id', data['id'])\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "why she cheated\\n",
									"type": "text"
								},
								{
									"key": "content_delta",
									"value": "{\"delta\": {\"ops\": [{\"insert\": \"why she cheated\\n\"}]}}",
									"type": "text"
								},
								{
									"key": "content_html",
									"value": "<p>why she cheated</p>",
									"type": "text"
								},
								{
									"key": "thread",
									"value": "{{thread_id}}",
									"type": "text"
								},
								{
									"key": "quotes",
									"value": "[]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}comments/{{comment_id}}/delete",
							"host": [
								"{{api_url}}comments"
							],
							"path": [
								"{{comment_id}}",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "why she cheated\\n",
									"type": "text"
								},
								{
									"key": "content_delta",
									"value": "{\"delta\": {\"ops\": [{\"insert\": \"why she cheated\\n\"}]}}",
									"type": "text"
								},
								{
									"key": "content_html",
									"value": "<p>why she cheated</p>",
									"type": "text"
								},
								{
									"key": "quotes",
									"value": "[]",
									"type": "text"
								},
								{
									"key": "thread",
									"value": "{{thread_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_url}}comments/{{comment_id}}/update",
							"host": [
								"{{api_url}}comments"
							],
							"path": [
								"{{comment_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('can create poll', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"thread\": 1,\r\n    \"question\": \"Is GÃ©nie the most beautiful girl ever?\",\r\n    \"poll_type\": \"Single\",\r\n    \"choices_limit\": 2,\r\n    \"allow_vote_change\": false,\r\n    \"closes\": true,\r\n    \"closing_date\": \"2021-1-1\",\r\n    \"public\": true,\r\n    \"voters_alone\": true,\r\n    \"possibilities\": [\r\n        {\r\n            \"text\": \"Yes\"\r\n        },\r\n        {\r\n            \"text\": \"No\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}polls/{{thread_id}}",
							"host": [
								"{{api_url}}polls"
							],
							"path": [
								"{{thread_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment Bookmark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('is bookmarked', () => {\r",
									"    pm.response.to.have.jsonBody('status', true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}comments/53/bookmark",
							"host": [
								"{{api_url}}comments"
							],
							"path": [
								"53",
								"bookmark"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}threads/{{thread_id}}/follow",
							"host": [
								"{{api_url}}threads"
							],
							"path": [
								"{{thread_id}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}threads/{{thread_id}}/delete",
							"host": [
								"{{api_url}}threads"
							],
							"path": [
								"{{thread_id}}",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Forums",
			"item": [
				{
					"name": "Forum",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}forums/{{forum_id}}",
							"host": [
								"{{api_url}}forums"
							],
							"path": [
								"{{forum_id}}"
							]
						},
						"description": "This is endpoint expects to return all the threads that are located under a given forum"
					},
					"response": []
				},
				{
					"name": "Forums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('list all forums', () => {\r",
									"    const data = pm.response.json()\r",
									"    const firstForum = data[0]\r",
									"    pm.environment.set('forum_id', firstForum['id'])\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}forums",
							"host": [
								"{{api_url}}forums"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "What's New",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('comments count', () => {\r",
							"    pm.response.to.have.jsonBody('count')\r",
							"    pm.response.to.have.jsonBody('results')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/comments/whats-new",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"comments",
						"whats-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users by username",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/users?user=a",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"users"
					],
					"query": [
						{
							"key": "user",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Lorem\",\r\n    \"search_titles_only\": false,\r\n    \"posted_by\": \"cold_fusion\",\r\n    \"forums\": [],\r\n    \"include_sub_forums\": true,\r\n    \"from_date\": \"2022-01-1\",\r\n    \"to_date\": \"2022-02-20\"\r\n}"
				},
				"url": {
					"raw": "{{api_url}}search?q=cheated",
					"host": [
						"{{api_url}}search"
					],
					"query": [
						{
							"key": "q",
							"value": "cheated"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('can login', () => {\r",
							"    const data = pm.response.json()\r",
							"    pm.response.to.have.jsonBody('token')\r",
							"    pm.environment.set('authenticationToken', data['token'])\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"username\": \"geniefan\",\r\n    \"password\": \"touparet\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}accounts/login",
					"host": [
						"{{api_url}}accounts"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('can login', () => {\r",
							"    pm.response.to.have.jsonBody('id')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/accounts/profile",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"accounts",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('can logout', () => {\r",
							"    pm.response.to.have.jsonBody('status')\r",
							"    pm.environment.set('authenticationToken', null)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/accounts/logout",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"accounts",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('can create poll', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"thread\": 1,\r\n    \"question\": \"Is GÃ©nie the most beautiful girl ever?\",\r\n    \"poll_type\": \"Single\",\r\n    \"choices_limit\": 2,\r\n    \"allow_vote_change\": false,\r\n    \"closes\": true,\r\n    \"closing_date\": \"2021-1-1\",\r\n    \"public\": true,\r\n    \"voters_alone\": true,\r\n    \"possibilities\": [\r\n        {\r\n            \"text\": \"Yes\"\r\n        },\r\n        {\r\n            \"text\": \"No\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/polls/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"polls",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Answer Poll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('can create poll', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"answers\": [1]\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/polls/1/answer",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"polls",
						"1",
						"answer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Thread",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"forum\": 1,\r\n    \"title\": \"I love Eugenie Bouchard\",\r\n    \"description\": \"This field should not be required\",\r\n    \"comment\": \"Some comment that is necessary for the thread\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/threads/8/delete",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"threads",
						"8",
						"delete"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('set authorization token', () => {",
					"    var token = pm.environment.get('authenticationToken')",
					"",
					"    if (token) {",
					"        pm.request.headers.add({",
					"            key: 'Authorization',",
					"            value: `Token ${token}`",
					"        }) ",
					"    }",
					"",
					"    pm.request.headers.add({",
					"        key: 'Content-Type',",
					"        value: 'application/json'",
					"    })",
					"",
					"    pm.request.headers.add({",
					"        key: 'Accept-Language',",
					"        value: 'fr,en-US;q=0.9,en-GB;q=0.8,es-ES;q=0.7'",
					"    })",
					"})",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}